#!/bin/bash

OS=$(uname -s)

DEFAULT_OUTPUT_DIR="Server/Src/Main/Reactor/Builders/Tables/Generated"

convert_to_pascal_case() {
    echo "$1" | awk -F'_' '{ for (i=1; i<=NF; i++) printf toupper(substr($i,1,1)) tolower(substr($i,2)) }'
}

CONFIG_FILE="Server/Src/Main/Infrastructure/Configuration/application.Development.json"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file $CONFIG_FILE not found."
    exit 1
fi

DB_CONNECTION=$(jq -r '.ConnectionStrings.FinanceDatabase' "$CONFIG_FILE")

if [ -z "$DB_CONNECTION" ]; then
    echo "Error: DB_CONNECTION not found in $CONFIG_FILE."
    exit 1
fi

if [[ "$OS" == "Darwin" ]]; then
    DB_HOST=$(echo "$DB_CONNECTION" | sed -n 's/.*Host=\([^;]*\).*/\1/p')
    DB_PORT=$(echo "$DB_CONNECTION" | sed -n 's/.*Port=\([^;]*\).*/\1/p')
    DB_USER=$(echo "$DB_CONNECTION" | sed -n 's/.*User=\([^;]*\).*/\1/p')
    DB_PASS=$(echo "$DB_CONNECTION" | sed -n 's/.*Password=\([^;]*\).*/\1/p')
    DB_NAME=$(echo "$DB_CONNECTION" | sed -n 's/.*Database=\([^;]*\).*/\1/p')
else
    DB_HOST=$(echo "$DB_CONNECTION" | grep -oP '(?<=Host=)[^;]+')
    DB_PORT=$(echo "$DB_CONNECTION" | grep -oP '(?<=Port=)[^;]+')
    DB_USER=$(echo "$DB_CONNECTION" | grep -oP '(?<=User=)[^;]+')
    DB_PASS=$(echo "$DB_CONNECTION" | grep -oP '(?<=Password=)[^;]+')
    DB_NAME=$(echo "$DB_CONNECTION" | grep -oP '(?<=Database=)[^;]+')
fi

mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASS" -D "$DB_NAME" -e "exit"
if [ $? -ne 0 ]; then
    echo "Error: Unable to connect to MariaDB database. Check your connection string."
    exit 1
fi

echo "Fetching table list from the database..."
TABLES=$(mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASS" -D "$DB_NAME" -se "SHOW TABLES;")

if [ -z "$TABLES" ]; then
    echo "Error: No tables found in the database or unable to fetch tables."
    exit 1
fi

echo "Available Tables:"
echo "$TABLES" | nl -w2 -s'. '

read -p "Enter a specific table number (or table name) to generate (or press Enter to generate all): " SELECTED_TABLE

read -p "Enter custom output directory (default: $DEFAULT_OUTPUT_DIR): " CUSTOM_OUTPUT_DIR
OUTPUT_DIR="${CUSTOM_OUTPUT_DIR:-$DEFAULT_OUTPUT_DIR}"

if [ ! -d "$OUTPUT_DIR" ]; then
    echo "Error: Output directory $OUTPUT_DIR does not exist."
    exit 1
fi

if [ -z "$SELECTED_TABLE" ]; then
    SELECTED_TABLES="$TABLES"
elif [[ "$SELECTED_TABLE" =~ ^[0-9]+$ ]]; then
    SELECTED_TABLE=$(echo "$TABLES" | sed -n "${SELECTED_TABLE}p")
    if [ -z "$SELECTED_TABLE" ]; then
        echo "Error: Table number '$SELECTED_TABLE' not found in the database."
        exit 1
    fi
    SELECTED_TABLES="$SELECTED_TABLE"
else
    if echo "$TABLES" | grep -wq "$SELECTED_TABLE"; then
        SELECTED_TABLES="$SELECTED_TABLE"
    else
        echo "Error: Table '$SELECTED_TABLE' not found in the database."
        exit 1
    fi
fi

for TABLE in $SELECTED_TABLES; do
    echo "Processing table: $TABLE"

    CLASS_NAME=$(convert_to_pascal_case "$TABLE")
    CLASS_FILE="$OUTPUT_DIR/${CLASS_NAME}Table.cs"

    COLUMNS=$(mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASS" -D "$DB_NAME" -se "DESCRIBE $TABLE;")

    if [ -z "$COLUMNS" ]; then
        echo "Error: Unable to fetch columns for table $TABLE."
        continue
    fi

    echo "//------------------------------------------------------------------------------" > "$CLASS_FILE"
    echo "// <auto-generated>" >> "$CLASS_FILE"
    echo "//     This code was auto-generated by a script." >> "$CLASS_FILE"
    echo "//     Changes to this file may cause incorrect behavior and will be lost" >> "$CLASS_FILE"
    echo "//     if the code is regenerated." >> "$CLASS_FILE"
    echo "//     Generated on: $(date)" >> "$CLASS_FILE"
    echo "// </auto-generated>" >> "$CLASS_FILE"
    echo "//------------------------------------------------------------------------------" >> "$CLASS_FILE"
    echo "" >> "$CLASS_FILE"
    echo "using System;" >> "$CLASS_FILE"
    echo "" >> "$CLASS_FILE"
    echo "namespace Src.Main.Reactor.Builders.Tables.Generated" >> "$CLASS_FILE"
    echo "{" >> "$CLASS_FILE"
    echo "    /// <summary>" >> "$CLASS_FILE"
    echo "    /// Static class representing the $TABLE table in the database." >> "$CLASS_FILE"
    echo "    /// </summary>" >> "$CLASS_FILE"
    echo "    public static class ${CLASS_NAME}Table" >> "$CLASS_FILE"
    echo "    {" >> "$CLASS_FILE"

    echo "        /// <summary>" >> "$CLASS_FILE"
    echo "        /// The name of the database table." >> "$CLASS_FILE"
    echo "        /// </summary>" >> "$CLASS_FILE"
    echo "        public const string TableName = \"$TABLE\";" >> "$CLASS_FILE"

    echo "$COLUMNS" | while read -r COLUMN_NAME COLUMN_TYPE _; do
        COLUMN_CONST=$(convert_to_pascal_case "$COLUMN_NAME")
        echo "        /// <summary>" >> "$CLASS_FILE"
        echo "        /// Column: $COLUMN_NAME" >> "$CLASS_FILE"
        echo "        /// Type: $COLUMN_TYPE" >> "$CLASS_FILE"
        echo "        /// </summary>" >> "$CLASS_FILE"
        echo "        public const string $COLUMN_CONST = \"$COLUMN_NAME\";" >> "$CLASS_FILE"
    done

    echo "    }" >> "$CLASS_FILE"
    echo "}" >> "$CLASS_FILE"
    echo "Class file created: $CLASS_FILE"
done
