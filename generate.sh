#!/bin/bash

OS=$(uname -s)
DEFAULT_OUTPUT_DIR="Server/Main/Reactor/Builders/Tables/Generated"
DTO_OUTPUT_DIR="$DEFAULT_OUTPUT_DIR/Models"
SCHEMA_DIR="Server/Main/Reactor/Builders/Tables/Schemas"
CONFIG_FILE="Server/Infrastructure/Configuration/application.Development.json"
DB_CONTAINER="testcontainers-db-1"

mkdir -p "$DTO_OUTPUT_DIR"

convert_to_pascal_case() {
    echo "$1" | awk -F'_' '{ for (i=1; i<=NF; i++) printf toupper(substr($i,1,1)) tolower(substr($i,2)) }'
}

map_sql_to_csharp_type() {
    local sql_type="$1"
    local is_nullable="$2"
    local base_type

    case "$sql_type" in
        tinyint\(1\)|bit) base_type="bool" ;;
        bigint) base_type="long" ;;
        int|integer|mediumint) base_type="int" ;;
        smallint) base_type="short" ;;
        float|double) base_type="double" ;;
        decimal|numeric|money) base_type="decimal" ;;
        varchar*|char*|text*|longtext|mediumtext|tinytext) base_type="string" ;;
        date|datetime|timestamp) base_type="DateTime" ;;
        blob*|binary*|varbinary*) base_type="byte[]" ;;
        *) base_type="string" ;;
    esac

    if [[ "$base_type" != "string" && "$base_type" != "byte[]" && "$is_nullable" == "YES" ]]; then
        echo "$base_type?"
    else
        echo "$base_type"
    fi
}

run_mariadb() {
    docker exec "$DB_CONTAINER" mariadb -u"$DB_USER" -p"$DB_PASS" -D "$DB_NAME" "$@"
}

ensure_table_exists() {
    local TABLE="$1"
    local EXISTS=$(run_mariadb -se "SHOW TABLES LIKE '$TABLE';")
    if [ -z "$EXISTS" ]; then
        echo "Table '$TABLE' does not exist. Attempting to create..."
        SQL_FILE="$SCHEMA_DIR/${TABLE}.sql"
        if [ ! -f "$SQL_FILE" ]; then
            echo "Error: Schema file not found: $SQL_FILE"
            return 1
        fi
        docker exec "$DB_CONTAINER" mariadb -u"$DB_USER" -p"$DB_PASS" "$DB_NAME" < "$SQL_FILE"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to create table '$TABLE'"
            return 1
        fi
        echo "Table '$TABLE' created successfully."
    fi
    return 0
}

generate_poco_dto() {
    local TABLE="$1"
    local CLASS_NAME
    CLASS_NAME=$(convert_to_pascal_case "$TABLE")
    local DTO_FILE="$DTO_OUTPUT_DIR/${CLASS_NAME}Dto.cs"
    local DESCRIBE=$(run_mariadb -se "DESCRIBE $TABLE;")

    {
        echo "//------------------------------------------------------------------------------"
        echo "// <auto-generated>"
        echo "//     This DTO was auto-generated by a script."
        echo "//     Generated on: $(date)"
        echo "// </auto-generated>"
        echo "//------------------------------------------------------------------------------"
        echo ""
        echo "using System;"
        echo ""
        echo "namespace Server.Main.Reactor.Builders.Tables.Generated.Models"
        echo "{"
        echo "    /// <summary>"
        echo "    /// $TABLE record."
        echo "    /// </summary>"
        echo "    public class ${CLASS_NAME}Dto"
        echo "    {"

        echo "$DESCRIBE" | while read -r COLUMN_NAME COLUMN_TYPE IS_NULLABLE _; do
            PROPERTY_NAME=$(convert_to_pascal_case "$COLUMN_NAME")
            CS_TYPE=$(map_sql_to_csharp_type "$COLUMN_TYPE" "$IS_NULLABLE")
            echo "        public $CS_TYPE $PROPERTY_NAME { get; set; }"
        done

        echo "    }"
        echo "}"
    } > "$DTO_FILE"

    echo "DTO file created: $DTO_FILE"
}

if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file $CONFIG_FILE not found."
    exit 1
fi

DB_CONNECTION=$(jq -r '.ConnectionStrings.FinanceDatabase' "$CONFIG_FILE")

if [ -z "$DB_CONNECTION" ]; then
    echo "Error: DB_CONNECTION not found in $CONFIG_FILE."
    exit 1
fi

if [[ "$OS" == "Darwin" ]]; then
    DB_USER=$(echo "$DB_CONNECTION" | sed -n 's/.*User=\([^;]*\).*/\1/p')
    DB_PASS=$(echo "$DB_CONNECTION" | sed -n 's/.*Password=\([^;]*\).*/\1/p')
    DB_NAME=$(echo "$DB_CONNECTION" | sed -n 's/.*Database=\([^;]*\).*/\1/p')
else
    DB_USER=$(echo "$DB_CONNECTION" | grep -oP '(?<=User=)[^;]+')
    DB_PASS=$(echo "$DB_CONNECTION" | grep -oP '(?<=Password=)[^;]+')
    DB_NAME=$(echo "$DB_CONNECTION" | grep -oP '(?<=Database=)[^;]+')
fi

run_mariadb -e "exit"
if [ $? -ne 0 ]; then
    echo "Error: Unable to connect to MariaDB container."
    exit 1
fi

echo "Fetching table list from the database..."
TABLES=$(run_mariadb -se "SHOW TABLES;" | grep -vE '_SEQ$')

if [ -z "$TABLES" ]; then
    echo "Error: No eligible tables found or failed to fetch tables."
    exit 1
fi

echo "Available Tables:"
echo "$TABLES" | nl -w2 -s'. '

read -p "Enter a specific table number (or table name) to generate (or press Enter to generate all): " SELECTED_TABLE
read -p "Enter custom output directory (default: $DEFAULT_OUTPUT_DIR): " CUSTOM_OUTPUT_DIR
OUTPUT_DIR="${CUSTOM_OUTPUT_DIR:-$DEFAULT_OUTPUT_DIR}"

if [ ! -d "$OUTPUT_DIR" ]; then
    echo "Error: Output directory $OUTPUT_DIR does not exist."
    exit 1
fi

if [ -z "$SELECTED_TABLE" ]; then
    SELECTED_TABLES="$TABLES"
elif [[ "$SELECTED_TABLE" =~ ^[0-9]+$ ]]; then
    SELECTED_TABLE=$(echo "$TABLES" | sed -n "${SELECTED_TABLE}p")
    [ -z "$SELECTED_TABLE" ] && echo "Error: Invalid table number" && exit 1
    SELECTED_TABLES="$SELECTED_TABLE"
else
    echo "$TABLES" | grep -wq "$SELECTED_TABLE" || { echo "Error: Table '$SELECTED_TABLE' not found."; exit 1; }
    SELECTED_TABLES="$SELECTED_TABLE"
fi

for TABLE in $SELECTED_TABLES; do
    if [[ "$TABLE" == *_SEQ ]]; then
        echo "Skipping sequence table: $TABLE"
        continue
    fi

    echo "Processing table: $TABLE"
    ensure_table_exists "$TABLE" || continue

    CLASS_NAME=$(convert_to_pascal_case "$TABLE")
    CLASS_FILE="$OUTPUT_DIR/${CLASS_NAME}Table.cs"
    COLUMNS=$(run_mariadb -se "DESCRIBE $TABLE;")

    {
        echo "//------------------------------------------------------------------------------"
        echo "// <auto-generated>"
        echo "//     This code was auto-generated by a script."
        echo "//     Generated on: $(date)"
        echo "// </auto-generated>"
        echo "//------------------------------------------------------------------------------"
        echo ""
        echo "using System;"
        echo ""
        echo "namespace Server.Main.Reactor.Builders.Tables.Generated"
        echo "{"
        echo "    /// <summary>"
        echo "    /// Static class representing the $TABLE table in the database."
        echo "    /// </summary>"
        echo "    public static class ${CLASS_NAME}Table"
        echo "    {"
        echo "        public const string TableName = \"$TABLE\";"
        echo ""

        echo "$COLUMNS" | while read -r COLUMN_NAME COLUMN_TYPE _; do
            COLUMN_CONST=$(convert_to_pascal_case "$COLUMN_NAME")
            echo "        /// <summary>"
            echo "        /// Column: $COLUMN_NAME"
            echo "        /// Type: $COLUMN_TYPE"
            echo "        /// </summary>"
            echo "        public const string $COLUMN_CONST = \"$COLUMN_NAME\";"
        done

        echo "    }"
        echo "}"
    } > "$CLASS_FILE"

    echo "Class file created: $CLASS_FILE"

    # --- Generate DTO ---
    generate_poco_dto "$TABLE"
done
